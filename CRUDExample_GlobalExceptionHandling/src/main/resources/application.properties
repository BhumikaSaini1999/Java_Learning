spring.application.name=CRUDExample_GlobalExceptionHandling

server.port=8081

#mysql local db
spring.datasource.url=jdbc:mysql://localhost:3306/codedecode?useSSL=false
spring.datasource.username=root
spring.datasource.password=Bhumi@1999
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect


#update->The spring.jpa.hibernate.ddl-auto property in a Spring Boot application controls how Hibernate handles 
#database schema generation. Setting it to update means that Hibernate will try to update the existing 
#database schema to match the entity mappings defined in your application. This includes adding new tables, 
#columns, and constraints without deleting anything.

#Here are the common options for spring.jpa.hibernate.ddl-auto:
#none: No action will be taken with the database schema.
#validate: Hibernate will validate the schema, checking if it matches the entities, but won't make any changes.
#update: Hibernate will update the schema, keeping the existing data intact.
#create: Hibernate will create the schema, dropping existing tables and recreating them.
#create-drop: Similar to create, but the schema will be dropped when the session ends.
#Using update is useful during development when you want to automatically synchronize the schema with your entities without losing data. However, it's generally not recommended for production environments, as it could lead to unintended schema changes.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.show-sql=true
