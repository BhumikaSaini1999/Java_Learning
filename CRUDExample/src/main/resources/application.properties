spring.application.name=CRUDExample

server.port=8081

#mysql local db
spring.datasource.url=jdbc:mysql://localhost:3306/codedecode?useSSL=false
spring.datasource.username=root
spring.datasource.password=Bhumi@1999
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#It tells Hibernate how to convert HQL (Hibernate Query Language) into the native SQL of the 
#particular database you are using. Using the correct dialect ensures that Hibernate produces SQL statements 
#compatible with the database version, which can prevent errors or inefficient queries.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect


#update->The spring.jpa.hibernate.ddl-auto property in a Spring Boot application controls how Hibernate handles 
#database schema generation. Setting it to update means that Hibernate will try to update the existing 
#database schema to match the entity mappings defined in your application. This includes adding new tables, 
#columns, and constraints without deleting anything.

#Here are the common options for spring.jpa.hibernate.ddl-auto:(5)
#none: No action will be taken with the database schema.
#validate: Hibernate will validate the schema, checking if it matches the entities, but won't make any changes.
#update: Hibernate will update the schema, keeping the existing data intact.
#create: Hibernate will create the schema, dropping existing tables and recreating them.(schema dropped only at startup)
#create-drop: Similar to create, but the schema will be dropped when the session ends.(schema dropped at startup+shutdown)

#When you set spring.jpa.hibernate.ddl-auto=create-drop, Hibernate behaves similarly to create in that it 
#drops the existing schema and creates a new one when the application starts. However, with create-drop, 
#the schema is also dropped when the application context is closed (when the application shuts down).
#Like create, all existing data is lost at startup. Additionally, any data added during the application's 
#runtime will also be lost upon shutdown since the schema is dropped at the end.

#Using update is useful during development when you want to automatically synchronize the schema 
#with your entities without losing data. However, it's generally not recommended for production environments, 
#as it could lead to unintended schema changes.
spring.jpa.hibernate.ddl-auto=update

#When set to true, this property instructs Hibernate to log the SQL statements it executes. 
#This can be extremely helpful for debugging and understanding what queries Hibernate is generating 
#and executing against the database.
spring.jpa.hibernate.show-sql=true