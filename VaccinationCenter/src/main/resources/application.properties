spring.application.name=VACCINATION-CENTER-SERVICE
server.port=9899
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#mysql local db
spring.datasource.url=jdbc:mysql://localhost:3306/vaccinationcenterdb
spring.datasource.username=root
spring.datasource.password=Bhumi@1999
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.show-sql=true


management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

#Understanding Circuit Breaker States:
#Closed: The Circuit Breaker allows all requests to pass through. If a certain threshold of failures is reached, the Circuit Breaker transitions to the "open" state.
#Open: The Circuit Breaker blocks all requests and immediately fails them, preventing further load on the system. It stays in this state for a duration defined by waitDurationInOpenState.
#Half-Open: After the waitDurationInOpenState has passed, the Circuit Breaker transitions to this state, allowing a limited number of trial requests to pass through to check if the issue is resolved.


#The registerHealthIndicator property in Resilience4j's Circuit Breaker configuration is used to register a 
#health indicator for the Circuit Breaker with Spring Boot's actuator. This health indicator provides information 
#about the Circuit Breaker's current state, which can be useful for monitoring and diagnostics.
#The health indicator will show the status of the Circuit Breaker, such as whether it is in the "closed," "open," or 
#"half-open" state, and can include additional details like failure rates and the number of successful or failed calls.
#By setting registerHealthIndicator: true, the health status of the myFallBackMechanism Circuit Breaker
#will be available through the Spring Boot Actuator's /actuator/health endpoint.
#This allows you to monitor the health of your Circuit Breaker as part of your overall application health checks.
resilience4j.circuitbreaker.instances.myFallBackMechanism.registerHealthIndicator=true

#The eventConsumerBufferSize property in Resilience4j's Circuit Breaker configuration determines the size of the buffer 
#that holds Circuit Breaker events, such as state transitions or recorded successes and failures. 
#This buffer is used by event consumers that listen to these events, allowing them to process and react to the 
#Circuit Breaker's behavior.
#This size specifies how many events the buffer can hold. If more events are generated than the buffer can hold,
# the oldest events are discarded to make room for the newest ones.

#The buffer size for Circuit Breaker events is set to 10.
#This means that only the 10 most recent Circuit Breaker events will be stored in the buffer. 
#If more than 10 events occur, the oldest ones will be removed as new events are added.
resilience4j.circuitbreaker.instances.myFallBackMechanism.eventConsumerBufferSize=10

#if 50% of the requests failed due to CITIZEN-SERVICE then open the circuit
resilience4j.circuitbreaker.instances.myFallBackMechanism.failureRateThreshold=50

#The Circuit Breaker requires at least 5 calls to be made before it starts assessing the failure rate to decide whether 
#to transition to the "open" state.The Circuit Breaker will not evaluate or potentially transition to an "open" state until 
#at least this number of calls has been made. This ensures that there is a sufficient sample size to make a meaningful decision 
#about whether the service is failing too often.
#Once the minimumNumberOfCalls threshold is met, the Circuit Breaker will start comparing the failure rate of these calls against the configured failure rate threshold.
#If the failure rate exceeds the threshold (e.g., 50%), and at least 5 calls have been made, the Circuit Breaker may transition to the "open" state, blocking further requests for a specified duration (waitDurationInOpenState).
resilience4j.circuitbreaker.instances.myFallBackMechanism.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.myFallBackMechanism.automaticTransitionFromOpenToHalfOpenEnabled=true

#after waiting for 5s in open state, Circuit Breaker transitions to half-open state
#If the duration is too short, the system might attempt to recover too quickly, potentially leading to repeated failures.
#If the duration is too long, the system may take longer to recover even when the underlying issue is resolved.
resilience4j.circuitbreaker.instances.myFallBackMechanism.waitDurationInOpenState=5s

#When the Circuit Breaker is in the "half-open" state, it will allow only the configured number of calls to pass through.
#When the Circuit Breaker transitions from the "open" state to the "half-open" state, 
#it doesn't immediately return to the "closed" state. Instead, it allows a limited number of trial calls to pass through to test whether the underlying issue has been resolved. The permittedNumberOfCallsInHalfOpenState property controls how many such calls are allowed.
#The outcome of these calls (successes or failures) determines whether the Circuit Breaker will transition back to 
#the "closed" state (if the issue is resolved) or return to the "open" state (if the issue persists).
resilience4j.circuitbreaker.instances.myFallBackMechanism.permittedNumberOfCallsInHalfOpenState=3


#The slidingWindowSize determines the number of calls (or the time span) that the Circuit Breaker should consider when 
#calculating the failure rate. Only the calls within this window are used to decide if the failure rate exceeds 
#the threshold that triggers the Circuit Breaker to open.The sliding window is a moving window of recent calls 
#that the Circuit Breaker uses to calculate the failure rate. 

#This window can either be time-based (e.g., the last 10 seconds) 
#or count-based (e.g., the last 100 calls), depending on how the Circuit Breaker is configured.
#The sliding window is set to 10, meaning the Circuit Breaker will evaluate the last 10 
#calls to determine the success or failure rate. If a configured percentage of these 10 calls fail, 
#the Circuit Breaker might transition to the "open" state, depending on the failure rate threshold.
#Too Small: If the sliding window size is too small, the Circuit Breaker might react too quickly to short-term fluctuations in the service's performance, leading to unnecessary openings.
#Too Large: If the sliding window size is too large, it might delay the Circuit Breaker's response to a genuine problem, allowing more failed requests to pass through before the Circuit Breaker opens.
resilience4j.circuitbreaker.instances.myFallBackMechanism.slidingWindowSize=10


#Sliding Window Type: The type of sliding window (time-based or count-based) is determined by the slidingWindowType property,
# which works in conjunction with slidingWindowSize.
#If slidingWindowType is set to COUNT_BASED, then slidingWindowSize represents the number of calls.
#If slidingWindowType is set to TIME_BASED, then slidingWindowSize represents the time span (in seconds).
resilience4j.circuitbreaker.instances.myFallBackMechanism.slidingWindowType=COUNT_BASED